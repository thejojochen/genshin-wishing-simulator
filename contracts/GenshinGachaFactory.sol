// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

/**
 * @title NFT factory which mints genshin characters and weapons as ERC 721 NFTS
 * @author soumetsu
 * @notice Good luck with your pulls!
 * @dev This contract is linked to the associated wish contract
 */

contract GenshinGachaFactory is ERC721 {
    /**
     * @dev address of the wish contract
     */
    address public wishAddress;

    /**
     * @dev owner of contract
     */
    address public owner;

    /**
     * @dev if the contract is initialized
     */
    bool public initialized = false;

    /**
     * @dev array of strings, each is a URI stored on ipfs
     * references to this array later point to a URI
     * each URI corresponds to a unique characte or item
     */
    string[] public URIs;

    /**
     * @dev index numbers of current standard four stars
     * corresponds to string[] public URIs
     */
    uint256[] public standardFourStars;

    /**
     * @dev index numbers of current featured four stars
     * corresponds to string[] public URIs
     */
    uint256[] public featuredFourStars;

    /**
     * @dev index numbers of current standard five stars
     * corresponds to string[] public URIs
     */
    uint256[] public standardFiveStars;

    /**
     * @dev maps tokenId of a specific ERC721 NFT to a corresponding URI
     */
    mapping(uint256 => string) public tokenIdToURI;

    /**
     * @dev token counter, incremented everytime new NFT is minted
     */
    uint256 public tokenIdCounter = 1;

    /**
     * @dev only allows wish contract (Wish.sol) to call
     */
    modifier onlyWishAddress() {
        require(msg.sender == wishAddress, "only wish contract can call");
        _;
    }

    /**
     * @dev only allows owner to call
     */
    modifier ownerOnly() {
        require(msg.sender == owner, "only wish contract can call");
        _;
    }
    /**
     * @dev check if initialized
     */
    modifier notInitialized() {
        require(initialized == false, "already initialized");
        _;
    }

    constructor(string memory name_, string memory symbol_)
        ERC721(name_, symbol_)
    {
        owner = msg.sender;
    }

    /**
     * @dev called by wish contract, mints item according to random numbers generated by Chainlink VRF
     *
     */
    function mintRandomItem(
        uint256[] memory rarityArray,
        address _to,
        uint256 _randomNumber
    ) external onlyWishAddress {
        uint256 _moddedIndex = getTheIndex(rarityArray, _randomNumber);
        mint(_to, _moddedIndex);
    }

    /**
     * @dev called by wish contract, mints one of the two featured five star characters
     *
     */
    function mintFeaturedFiveStar(address _to, uint256 _URIIndex)
        external
        onlyWishAddress
    {
        mint(_to, _URIIndex);
    }

    /**
     * @dev needed since factory contract is deployed first
     */
    function initialize(address _wishAddress) public ownerOnly notInitialized {
        wishAddress = _wishAddress;
        initialized = true;
    }

    /**
     * @dev for new characters and items
     */
    function addURI(string memory _newURI) public ownerOnly {
        URIs.push(_newURI);
    }

    /**
     * @dev required by opensea
     */
    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        _requireMinted(tokenId);

        string memory requestedURI = tokenIdToURI[tokenId];
        return requestedURI;
    }

    function getURIsLength() public view returns (uint256) {
        return URIs.length;
    }

    /**
     * @dev required by opensea, url points to non relevant contract
     */
    function baseTokenURI() public pure returns (string memory) {
        return
            "https://ipfs.io/ipfs/QmbmR2xpe4NT7JPpiXZFLSL7dbJzDQDgK6BRiMDrr43Acb";
    }

    /**
     * @dev calls internal _mint function and assigns tokenId
     */
    function mint(address to, uint256 URIIndex) internal {
        uint256 _tokenId = tokenIdCounter;
        _mint(to, _tokenId);
        tokenIdToURI[_tokenId] = URIs[URIIndex];
        tokenIdCounter = tokenIdCounter + 1;
    }

    /**
     * @dev manipulates random number, dividing randomNumber by targetArr length (from Wish.sol)
     */
    function getTheIndex(uint256[] memory targetArr, uint256 _randomNumber)
        internal
        pure
        returns (uint256)
    {
        //uint256 randomNumber = _randomNumber;
        uint256 moddedNumber = (_randomNumber % targetArr.length) + 0;
        uint256 moddedIndex = targetArr[moddedNumber];
        return moddedIndex;
    }

    /**
     * @dev overrides erc721 implmentation since functionality not needed
     */

    function approve(address to, uint256 tokenId) public override {
        revert("not a valid operation");
    }

    /**
     * @dev overrides erc721 implmentation since functionality not needed
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public override {
        revert("not a valid operation");
    }

    /**
     * @dev overrides erc721 implmentation since functionality not needed
     */
    function setApprovalForAll(address operator, bool approved)
        public
        override
    {
        revert("not a valid operation");
    }

    /**
     * @dev overrides erc721 implmentation since functionality not needed
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        revert("not a valid operation");
    }
}
